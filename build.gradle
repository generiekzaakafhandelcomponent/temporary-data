plugins {
    id "idea"

    id "org.springframework.boot" version "${springBootVersion}"
    id "io.spring.dependency-management" version "${springDependencyManagementVersion}"

    id "org.jetbrains.kotlin.jvm" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.spring" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.jpa" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.allopen" version "${kotlinVersion}"

    // Other
    id("com.avast.gradle.docker-compose") version "0.17.12"
    id("cn.lalaki.central") version "1.2.5"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

group = projectGroup
version = projectVersion

repositories {
    mavenLocal()
    mavenCentral()
    maven { url = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/") }
    maven { url = uri("https://repo.ritense.com/repository/maven-public/") }
    maven { url = uri("https://repo.ritense.com/repository/maven-snapshot/") }
}

apply plugin: "java"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin : "idea"
apply plugin : "java-library"
apply plugin : "kotlin"
apply plugin : "kotlin-spring"
apply plugin : "kotlin-jpa"
apply plugin : "com.avast.gradle.docker-compose"
apply plugin : "maven-publish"

java.sourceCompatibility = JavaVersion.VERSION_17
java.targetCompatibility = JavaVersion.VERSION_17


java {
    withSourcesJar()
    withJavadocJar()
}

test {
    useJUnitPlatform()
}

configurations {
    testImplementation {
        // Globally exclude JUnit4, will not be on the testCompileClasspath thus
        exclude group: 'junit', module: 'junit'
    }
}

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

def Os = DefaultNativePlatform.currentOperatingSystem

if (Os.isMacOsX()) {
    println("Configure docker compose for macOs")
    dockerCompose {
        projectNamePrefix = "temporary-data-test-"
        setProjectName("${rootProject.name}-${project.name}")
        executable = "/usr/local/bin/docker-compose"
        dockerExecutable = "/usr/local/bin/docker"
    }
}

tasks.bootJar {
    enabled = false
}

dependencies {

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api("com.ritense.valtimo:value-resolver:${valtimoVersion}")
    api("com.ritense.valtimo:zaken-api:${valtimoVersion}")
    api("com.ritense.valtimo:contract:${valtimoVersion}")
    api("com.ritense.valtimo:document:${valtimoVersion}")
    api("com.ritense.valtimo:process-document:${valtimoVersion}")
    api("com.ritense.valtimo:plugin:${valtimoVersion}")

    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation 'io.github.oshai:kotlin-logging-jvm:5.1.0'

    // test dependencies
    testApi("com.ritense.valtimo:zaken-api:${valtimoVersion}")

    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation 'io.mockk:mockk:1.14.3'
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
}
