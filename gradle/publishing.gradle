

def sonatypeCentralStagingDir = "sonatypeCentralStaging"
def signingConfigSet = false
if(System.getenv('SIGNING_KEY') &&
    System.getenv('SIGNING_KEY_PASSWORD')
) {
    signingConfigSet = true
}

if(signingConfigSet) {
    apply plugin: 'signing'
}

if(System.getenv('SONATYPE_USR') &&
        System.getenv('SONATYPE_PSW')
) {
    apply plugin: 'maven-publish'
    apply plugin: 'cn.lalaki.central'
}

publishing {
    repositories {
        maven {
            name "Sonatype"
            url = sonatypeCentralStagingDir
        }
    }
    publications {
        maven(MavenPublication) {
            groupId = 'com.ritense.temporarydata'

            pom {
                url = 'https://github.com/generiekzaakafhandelcomponent/temporary-data'
                licenses {
                    license {
                        name = 'Licensed under EUPL, Version 1.2 (the "License");'
                        url = 'https://joinup.ec.europa.eu/collection/eupl/eupl-text-eupl-12'
                    }
                }
                scm {
                    connection = "git@github.com:generiekzaakafhandelcomponent/temporary-data.git"
                    developerConnection = "git@github.com:generiekzaakafhandelcomponent/temporary-data.git"
                    url = "https://github.com/generiekzaakafhandelcomponent/temporary-data"
                }
            }

            if (components.hasProperty("javaPlatform")) {
                from components.javaPlatform
            } else {
                from components.java
            }
        }
    }
}

centralPortalPlus {
    url = uri(sonatypeCentralStagingDir)
    username = System.getenv('SONATYPE_USR')
    password = System.getenv('SONATYPE_PSW')
}

if(signingConfigSet) {
    signing {
        def signingKeyBase64 = System.getenv("SIGNING_KEY")
        def signingKeyBytes= signingKeyBase64.decodeBase64()
        def signingKey = new String(signingKeyBytes, "UTF-8")
        def signingKeyPassword = System.getenv('SIGNING_KEY_PASSWORD')

        useInMemoryPgpKeys(signingKey, signingKeyPassword)
        sign configurations.archives
        sign publishing.publications.maven
    }
}


def filterVersionLine(bufferedReader) {
    def line
    def versionLine
    while ((line = bufferedReader.readLine()) != null) {
        if((line.startsWith('version') && !line.startsWith('version.')) || line.startsWith('projectVersion') || line.startsWith('version.semver')) {
            versionLine = line.split('=')
        }
    }
    return versionLine
}

def parseProjectVersion(filePath) {
    def fileString = new File(filePath).getText('UTF-8')
    def bufferedReader = new BufferedReader(new StringReader(fileString))
    def versionLine = filterVersionLine(bufferedReader)

    // strip off -SNAPSHOT postfixes
    def projectVersion = versionLine[1]
    projectVersion = projectVersion.trim()
    if(projectVersion.contains('-')) {
        projectVersion = projectVersion.split('-')[0]
    }
    return projectVersion
}
